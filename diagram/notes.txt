http://rosettacode.org/wiki/ASCII_art_diagram_converter

several examples have similar output so I think try to 
match those

http://rosettacode.org/wiki/ASCII_art_diagram_converter#Go

http://rosettacode.org/wiki/ASCII_art_diagram_converter#Java

http://rosettacode.org/wiki/ASCII_art_diagram_converter#Julia

etc.

Looks like take the diagram in as a string:

+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                      ID                       |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    QDCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ANCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+  
|                    NSCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ARCOUNT                    |  
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

Use it to define what pattern of bits you expect.

Then pass in a hex string corresponding to these
12 bytes (each space is a bit) and decode it.

Output I want to mimic from Go example:

Diagram after trimming whitespace and removal of blank lines:

+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                      ID                       |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    QDCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ANCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    NSCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ARCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

Decoded:

Name     Bits  Start  End
=======  ====  =====  ===
ID        16      0    15
QR         1     16    16
Opcode     4     17    20
AA         1     21    21
TC         1     22    22
RD         1     23    23
RA         1     24    24
Z          3     25    27
RCODE      4     28    31
QDCOUNT   16     32    47
ANCOUNT   16     48    63
NSCOUNT   16     64    79
ARCOUNT   16     80    95

Test string in hex:
78477bbf5496e12e1bf169a4

Test string in binary:
011110000100011101111011101111110101010010010110111000010010111000011011111100010110100110100100

Unpacked:

Name     Size  Bit pattern
=======  ====  ================
ID        16   0111100001000111
QR         1   0
Opcode     4   1111
AA         1   0
TC         1   1
RD         1   1
RA         1   1
Z          3   011
RCODE      4   1111
QDCOUNT   16   0101010010010110
ANCOUNT   16   1110000100101110
NSCOUNT   16   0001101111110001
ARCOUNT   16   0110100110100100

Can use this to test my logic to match Go example's.

What's a good Pythonic way to look at 12 bytes and
pull out the various pieces?

some of the C struct stuff does byte alignment
so it might skip bytes.

Inefficient way is convert hex string into an int type
convert it to binary as a string.
hack up the string into the different sizes.
convert each piece back to an int

of course to get the above pattern could just
leave an string of 1's and 0's.

could decode the input string as a list of lists

[[name, bits],[...

i.e.

[['ID',16],['QR',1],['Opcode',4],...

use this list to print decoded output

then convert the hex string to a 
character string of 1s and 0s and carve up 
to produce unpacked output.

